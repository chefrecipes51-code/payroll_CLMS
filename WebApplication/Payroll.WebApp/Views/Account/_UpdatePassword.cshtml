@model Payroll.WebApp.Models.DTOs.LoginDTO

@{
    Layout = null;
}


<!-- Update Password Form -->
<div class="login_form_wrapper">
    <img class="login-logo" src="assets/img/icons/mantra-logo.svg" height="60" width="222" alt="logo">

    <p class="title-primary">Reset Password</p>
    <div class="password-info-tooltip-container">
        <p class="sm-text-gray-neutral">Generate New Password</p>

        <button type="button" class="btn btn-password-info">
            <span class="sprite-icons info-i-icon"></span>
        </button>
        <div class="password-info arrow-border-top">
            <ul>
                <li class="sm-text text_primary"></li>
            </ul>
        </div>
    </div>

    <div class="form-section">
        <div class="form-group password-validations">
            <label for="newpassword" class="form-label">New Password <sup>*</sup></label>
            <div class="password-area">
                <input id="txtNewPassword" type="password" class="form-control" placeholder="Enter new password" name="newpassword" tabindex="1">
                <button class="btn btn-password-show-hide">
                    <span class="sprite-icons open-eye"></span>
                </button>
            </div>

            <div class="password-strength-container d-none">
                <div class="password-quality">
                    <div class="password-strength weak"></div>      <!-- Weak: score = 50 -->
                    <div class="password-strength fair"></div>      <!-- Fair: score = 80 -->
                    <div class="password-strength good"></div>      <!-- Good: score = 100 -->
                </div>
                <p class="sm-text text-label"></p> <!-- Label for strength level/stage in words -->
            </div>
        </div>
        <div class="form-group">
            <label for="cnfmpassword" class="form-label">
                Confirm New Password
                <sup>*</sup>
            </label>
            <div class="password-area">
                <input id="txtConfirmPassword" type="password" class="form-control" placeholder="Enter confirm password" tabindex="2">
                <button class="btn btn-password-show-hide">
                    <span class="sprite-icons open-eye"></span>
                </button>
            </div>
        </div>
        <p id="new-confirm-password-validation-message" class="input_error_msg"></p>
        <button type="button" id="btnUpdatePassword" onclick="updatePassword()" class="btn_primary_md w-100 loader-dot-pulse" disabled>Save</button>

        <!-- <div class="tac-wrapper"> -->
        <div class="tac-container">
            <p class="sm-text-gray-neutral">
                By Clicking on Login, you are agree to Payroll’s
            </p><a href="#" class="btn-link-primary">Terms and conditions of Use</a>
        </div>
        <!-- </div> -->
    </div>
</div>


<script>
        $(document).ready(function () {

        /* # Designer Team Login Js Code Start */
        $('.owl-slider').owlCarousel({
            items: 1,
            loop: true,
            margin: 10,
            autoplay: true,
            autoplayTimeout: 3000,
            dots: true,
            mouseDrag: true,
            navigation: true,
        });

        // Attach the event handler to multiple elements
        $('#txtPassword,#txtCaptcha,#txtConfirmPassword').on('copy paste', disableCopyPaste);

        function disableCopyPaste(e) {
            e.preventDefault();
            toastr.info('This functionality is disabled.', 'Error');
        }

        $("#txtCaptcha").on('input', function () {
            // Limit input to 6 digits
            if (this.value.length > 6) {
                this.value = this.value.slice(0, 6);
            }
        });

        $('.btn-password-show-hide').on('click', function (e) {
            e.preventDefault(); // Prevent form submission or other actions
            const passwordField = $(this).siblings('input');  // Get the input field associated with the button
            const isPassword = passwordField.attr('type') === 'password';

            // Toggle the password field type and eye icon class
            passwordField.attr('type', isPassword ? 'text' : 'password');
            $(this).find('.sprite-icons').toggleClass('open-eye close-eye');
        });

        authConfig = {
            startWithCharType: true,
            endWithNumType: true,
            numberOfSpecialCharacters: 1,
            numberOfDigits: 6,
            numberOfCharacters: 5,
            excludeSequence: 3,
            hasSpecialCharacter: true,
            passwordMinLength: 10,
            passwordMaxLength: 16,
        };

        displayPasswordStrength(0);
        $("#txtNewPassword").on("input", function () {
            let password = $(this).val();
            let score = password ? calculatePasswordStrength(password, authConfig) : 0;
            displayPasswordStrength(score);
        });

        // Populate password rules when the page loads after click on Info button.
        populatePasswordRules(authConfig);

        // Handle password input changes
        $('#txtNewPassword').on('input', function () {
            const password = $(this).val();
            validatePassword(password, authConfig);
        });

        // Show tooltip on click over the info icon
        $("#passwordInfo").click(function (e) {
            const offset = $(this).offset();
            const $tooltip = $(".password-tooltip");

            if ($tooltip.is(":visible")) {
                $tooltip.fadeOut(200);
            } else {
                $tooltip.css({
                    top: offset.top + $(this).outerHeight() + 5,
                    left: offset.left
                }).stop(true, true).fadeIn(200);
            }
            e.stopPropagation();  // Prevent event propagation
        });

        $('#btnSignIn').click(function () {

            event.preventDefault();

            const $this = $(this);
            $this.prop('disabled', true);

            var loginModel = {
                Username: $("#txtUsername").val().trim(),
                Password: $("#txtPassword").val().trim(),
                Captcha: $('#txtCaptcha').val().trim()
            };

            var validationMessages = {
                username: $('#common-validation-message'),
                password: $('#common-validation-message'),
                captcha: $('#common-validation-message')
            };

            if (!validateLoginModel(loginModel, validationMessages)) {
                $this.prop('disabled', false);
                return;
            }

            $.ajax({
                type: 'POST',
                url: "/Account/Auth/",
                data: JSON.stringify(loginModel),
                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                success: function (responseModel)
                {
                    if (responseModel.isSuccess)
                    {
                        toastr.info(responseModel.message, 'Information');

                        if (responseModel.result.startsWith("/"))
                        {
                            window.location.href = responseModel.result;
                        }
                        else if (responseModel.verifyUserCode == responseModel.authCode)
                        {
                            sendEmail(responseModel.result, responseModel.templateType)
                                .then(() => {
                                    $('#LoginForm').toggleClass('d-block d-none');
                                    $('#OTPVerificationForm').toggleClass('d-none d-block').html(responseModel.data);
                                })
                                .catch(() => {
                                    setTimeout(function () {
                                        toastr.clear();
                                        $this.prop('disabled', false);
                                    }, 2000);
                                });
                        }
                        else if (responseModel.statusCode == responseModel.authCode) {
                            // Bio-Metric Authentication Logic.
                        }
                    }
                    else {
                        toastr.error(responseModel.message, 'Error');
                        $('#common-validation-message').text('Invalid login request. Please check your credentials and try again.');
                        refreshCaptcha();
                        setTimeout(function () {
                            toastr.clear();
                            $this.prop('disabled', false);
                        }, 3000);
                    }
                },
                error: function (xhr) {
                    refreshCaptcha()
                    $this.prop('disabled', false);
                    alert("An error occurred: " + xhr.responseText);
                }
            });
        });

        $('#btnForgotPassword').click(function () {
            $.ajax({
                url: '/Account/ForgotPassword',
                type: 'GET',
                success: function (responseModel) {
                    $('#LoginForm').addClass('d-block d-none');
                    $("#ForgotPasswordForm").toggleClass('d-none d-block');
                    $("#ForgotPasswordForm").html(responseModel.data);
                },
                error: function (xhr, status, error) {
                    console.error("Error loading Forgot Password form: ", error);
                }
            });
        });
    });
</script>


<!-- Tooltip Toggle -->
<script>
    const button = document.querySelector('.btn-password-info');
    const passwordInfoBox = document.querySelector('.password-info');
    button?.addEventListener('click', (event) => {
        event.stopPropagation();
        button.classList.toggle('checked');
        passwordInfoBox.style.display = button.classList.contains('checked') ? 'block' : 'none';
    });
    document.addEventListener('click', (event) => {
        if (!button?.contains(event.target) && !passwordInfoBox?.contains(event.target)) {
            passwordInfoBox.style.display = 'none';
            button.classList.remove('checked');
        }
    });
</script>