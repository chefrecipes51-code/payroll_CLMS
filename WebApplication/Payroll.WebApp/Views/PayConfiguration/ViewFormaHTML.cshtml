<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Formula Builder</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="~/application/js/formulamaster/calculatepayformula.js"></script>
</head>
<body>

    <div class="container mt-4">
        <div class="mb-3">
            <label class="form-label"><strong>Formula Code</strong></label>
            <input type="text" id="formulaCode" name="formulaCode" class="form-control" placeholder="Enter Code" />
           
        </div>
        <!-- Formula Input Box -->
        <div class="mb-3">
            <label for="formulaInput" class="form-label"><strong>Formula</strong></label>
            <input type="text" id="formulaInput" class="form-control" placeholder="Build your formula here" readonly />
            <button id="btnClear" class="btn btn-success">Clear</button>
        </div>

        <!-- Operator Buttons -->
        <div class="d-flex flex-wrap gap-2 mb-3">
            <div><strong>Operators</strong></div>
            <button class="btn btn-light formula-btn">+</button>
            <button class="btn btn-light formula-btn">-</button>
            <button class="btn btn-light formula-btn">*</button>
            <button class="btn btn-light formula-btn">/</button>
            <button class="btn btn-light formula-btn">(</button>
            <button class="btn btn-light formula-btn">)</button>
        </div>

        <!-- Condition Buttons -->
        <div class="d-flex flex-wrap gap-2 mb-3">
            <div><strong>Conditions</strong></div>
            <button class="btn btn-light formula-btn">=</button>
            <button class="btn btn-light formula-btn">&lt;&gt;</button>
            <button class="btn btn-light formula-btn">&lt;</button>
            <button class="btn btn-light formula-btn">&gt;</button>
            <button class="btn btn-light formula-btn">&lt;=</button>
            <button class="btn btn-light formula-btn">&gt;=</button>
        </div>

        <!-- Other Keywords -->
        <div class="d-flex flex-wrap gap-2 mb-3">
            <div><strong>Other Block</strong></div>
            <button class="btn btn-light formula-btn">"</button>
            <button class="btn btn-light formula-btn">,</button>
            <button class="btn btn-light formula-btn">AND</button>
            <button class="btn btn-light formula-btn">OR</button>
        </div>

        <!-- List of Available Fields -->
       
        <div class="mb-3">
            <label><strong>Available Fields</strong></label>
            <ul id="fieldList" class="list-group">              
            </ul>
        </div>

        <!-- Apply Formula Button -->
        <div>
            <button id="btnApplyFormula" class="btn btn-success">Apply Formula</button>
        </div>

    </div>


    <script>
        $(document).ready(function () {
              $("#btnClear").on("click", function () {
                    $formulaInput.val('');
                });
            const $formulaInput = $("#formulaInput");

            // Append clicked value to formula
            $(document).on("click", ".formula-btn", function () {
                const value = $(this).text().trim();
                appendToFormula(value);
            });
                        // Append field item
            $(document).on("click", ".field-item", function () {
                const field = $(this).text().trim();
                appendToFormula(field);
            });
            // Apply formula
            $("#btnApplyFormula").on("click", function () {
                const formula = $formulaInput.val().trim();
                const validationMessage = validateFormula(formula);
                if (validationMessage) {
                    alert("⚠️ " + validationMessage);
                } else {
                    console.log("✅ Formula Applied:", formula);
                    alert("✅ Formula Applied: " + formula);
                }
            });
            function appendToFormula(value) {
                let formula = $formulaInput.val();
                formula += (formula && !formula.endsWith(" ")) ? " " + value : value;
                $formulaInput.val(formula.trim());
            }    
    function validateFormula(formula) {
            const operators = ["+", "-", "*", "/", "=", "<>", "<", ">", "<=", ">=", "AND", "OR"];
            const logicalOperators = ["AND", "OR"];
            const comparisonOperators = ["=", "<>", "<", ">", "<=", ">="];

            const isOperator = (token) => typeof token === "string" && operators.includes(token.toUpperCase());
            const isLogicalOperator = (token) => typeof token === "string" && logicalOperators.includes(token.toUpperCase());
            const isComparisonOperator = (token) => typeof token === "string" && comparisonOperators.includes(token.toUpperCase());
            const isField = (token) => typeof token === "string" && /^[a-zA-Z_][a-zA-Z0-9_]*$/.test(token);
            const isNumber = (token) => typeof token === "string" && /^[0-9]+(\.[0-9]+)?$/.test(token);
            const isValidToken = (token) =>
                typeof token === "string" &&
                (isField(token) || isNumber(token) || isOperator(token) || token === "(" || token === ")");

            const tokens = formula.trim().split(/\s+/).filter(Boolean);
            if (tokens.length === 0) return "Formula cannot be empty.";

            let openParens = 0;
            let comparisonCount = 0;

            for (let i = 0; i < tokens.length; i++) {
                const token = tokens[i];
                const prev = tokens[i - 1];
                const next = tokens[i + 1];

                if (!isValidToken(token)) return `Invalid token: "${token}"`;

                if (token === "(") openParens++;
                if (token === ")") openParens--;
                if (openParens < 0) return "Unbalanced parentheses.";

                if ((isField(token) || isNumber(token)) && (isField(next) || isNumber(next))) {
                    return "Missing operator between fields or numbers.";
                }

                if (isOperator(token)) {
                    if (!prev || !next) return `Operator "${token}" cannot be at the start or end.`;
                    if (isOperator(prev)) return `Invalid sequence: "${prev} ${token}"`;
                    if (isOperator(next)) return `Invalid sequence: "${token} ${next}"`;

                    if (isComparisonOperator(token)) comparisonCount++;
                    if (comparisonCount > 1) return "Only one comparison operator allowed.";
                }

                if (token === "(" && next && !(isField(next) || isNumber(next) || next === "(")) {
                    return `Invalid token after "(": "${next}"`;
                }

                if (token === ")" && prev && !(isField(prev) || isNumber(prev) || prev === ")")) {
                    return `Invalid token before ")": "${prev}"`;
                }

                if ((isField(token) || isNumber(token)) && next === "(") {
                    return `Missing operator before "(": "${token} ("`;
                }

                if (token === ")" && (isField(next) || isNumber(next))) {
                    return `Missing operator after ")": ") ${next}"`;
                }
            }

            if (openParens !== 0) return "Unbalanced parentheses.";

                // alert("Valid formula: " + formula);
        }

        });
    </script>


</body>
</html>
